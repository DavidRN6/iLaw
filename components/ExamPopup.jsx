import { useState } from "react";
import { LuGraduationCap } from "react-icons/lu";
import { IoClose } from "react-icons/io5";
import toast from "react-hot-toast";

/*=====================
  ÿ´ÿßÿ®ÿ™ÿßÿ™ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
=====================*/
const YEARS = [
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ£ŸàŸÑŸâ",
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ´ÿßŸÜŸäÿ©",
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ´ÿßŸÑÿ´ÿ©",
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ±ÿßÿ®ÿπÿ©",
];
const TERMS = ["ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ£ŸàŸÑ", "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ´ÿßŸÜŸä"];

const SUBJECTS = {
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ£ŸàŸÑŸâ": {
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ£ŸàŸÑ": [
      "ÿßŸÑŸÜÿ∏ŸÖ ÿßŸÑÿ≥Ÿäÿßÿ≥Ÿäÿ©",
      "ÿßŸÑŸÖŸÜÿ∏ŸÖÿßÿ™ ÿßŸÑÿØŸàŸÑŸäÿ©",
      "ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÇÿßŸÜŸàŸÜ",
      {
        name: "ÿßŸÑŸÖÿØÿÆŸÑ ŸÑŸÑÿπŸÑŸàŸÖ ÿßŸÑŸÇÿßŸÜŸàŸÜŸäÿ©",
        subs: ["ŸÜÿ∏ÿ±Ÿäÿ© ÿßŸÑÿ≠ŸÇ", "ŸÜÿ∏ÿ±Ÿäÿ© ÿßŸÑŸÇÿßŸÜŸàŸÜ"],
      },
      { name: "ÿπŸÑŸÖ ÿßŸÑÿßÿ¨ÿ±ÿßŸÖ Ÿà ÿßŸÑÿπŸÇÿßÿ®", subs: ["ÿπŸÑŸÖ ÿßŸÑÿßÿ¨ÿ±ÿßŸÖ", "ÿπŸÑŸÖ ÿßŸÑÿπŸÇÿßÿ®"] },
      { name: "ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßÿ¨ŸÜÿ®Ÿäÿ©", subs: ["ÿßŸÜÿ¨ŸÑÿ¥", "ŸÅÿ±ŸÜÿ¥"] },
    ],
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ´ÿßŸÜŸä": [
      "ŸÇÿßŸÜŸàŸÜ ÿØÿ≥ÿ™Ÿàÿ±Ÿâ",
      "ÿßŸÑÿ¥ÿ±Ÿäÿπÿ© ÿßŸÑÿßÿ≥ŸÑÿßŸÖŸäÿ©",
      "ÿßŸÑÿßÿ≠ŸàÿßŸÑ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÑÿ∫Ÿäÿ± ÿßŸÑŸÖÿ≥ŸÑŸÖŸäŸÜ",
      "ŸÖÿ®ÿßÿØÿ¶ ÿßŸÑÿßŸÇÿ™ÿµÿßÿØ",
      "ÿßÿµŸàŸÑ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÇÿßŸÜŸàŸÜŸâ",
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿßŸÜÿ¨ŸÑŸàÿßŸÖÿ±ŸäŸÉŸâ",
      "ÿßŸÑÿ™ŸÅŸÉŸäÿ± ÿßŸÑŸÜŸÇÿØŸâ",
    ],
  },
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ´ÿßŸÜŸäÿ©": {
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ£ŸàŸÑ": [
      "ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿßÿ´ÿ®ÿßÿ™",
      { name: "ŸÜŸÇŸàÿØ Ÿà ÿ®ŸÜŸàŸÉ", subs: ["ŸÜŸÇŸàÿØ", "ÿ®ŸÜŸàŸÉ"] },
      { name: "ÿßŸÑÿ¥ÿ±Ÿäÿπÿ© ÿßŸÑÿßÿ≥ŸÑÿßŸÖŸäÿ©", subs: ["ÿ≤Ÿàÿßÿ¨", "ÿ∑ŸÑÿßŸÇ"] },
      { name: "ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿ£ÿ¨ŸÜÿ®Ÿäÿ©", subs: ["ÿ•ŸÜÿ¨ŸÑÿ¥", "ŸÅÿ±ŸÜÿ¥"] },
      "ÿ±ŸäÿßÿØÿ© ÿßÿπŸÖÿßŸÑ",
    ],
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ´ÿßŸÜŸä": [
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿØŸàŸÑŸâ ÿßŸÑÿπÿßŸÖ",
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿßÿØÿßÿ±Ÿâ",
      "ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿπŸÇŸàÿ®ÿßÿ™",
      { name: "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸÖÿØŸÜŸâ", subs: ["ÿßÿ≠ŸÉÿßŸÖ ÿßŸÑÿßŸÑÿ™ÿ≤ÿßŸÖ", "ŸÖÿµÿßÿØÿ± ÿßŸÑÿßŸÑÿ™ÿ≤ÿßŸÖ"] },
      "ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸÖÿµÿ±Ÿâ",
    ],
  },
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ´ÿßŸÑÿ´ÿ©": {
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ£ŸàŸÑ": [
      { name: "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸÖÿØŸÜŸâ", subs: ["ÿßŸÑÿ®Ÿäÿπ", "ÿßŸÑÿßŸäÿ¨ÿßÿ±", "ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ"] },
      { name: "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿØŸàŸÑŸâ", subs: ["ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿßÿ¨ÿßŸÜÿ®", "ÿßŸÑÿ¨ŸÜÿ≥Ÿäÿ©"] },
      "ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿπŸÖŸÑ",
      "ÿßŸÑŸÖÿßŸÑŸäÿ© ÿßŸÑÿπÿßŸÖÿ©",
    ],
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ´ÿßŸÜŸä": [
      {
        name: "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ¨ŸÜÿßÿ¶Ÿâ ÿßŸÑÿÆÿßÿµ",
        subs: ["ÿ¨ÿ±ÿßÿ¶ŸÖ ÿßŸÑÿßÿ¥ÿÆÿßÿµ", "ÿßŸÑŸÖÿµŸÑÿ≠ÿ© ÿßŸÑÿπÿßŸÖÿ©", "ÿ¨ÿ±ÿßÿ¶ŸÖ ÿßŸÑÿßŸÖŸàÿßŸÑ"],
      },
      { name: "ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßÿ¨ŸÜÿ®Ÿäÿ©", subs: ["ÿßŸÜÿ¨ŸÑÿ¥", "ŸÅÿ±ŸÜÿ¥"] },
      { name: "ÿßŸÑÿ¥ÿ±Ÿäÿπÿ© ÿßŸÑÿßÿ≥ŸÑÿßŸÖŸäÿ©", subs: ["ŸàÿµŸäÿ©", "ŸÖŸàÿßÿ±Ÿäÿ´"] },
      { name: "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿâ", subs: ["ÿ¥ÿ±ŸÉÿßÿ™", "ÿßÿπŸÖÿßŸÑ"] },
      "ŸÇÿ∂ÿßÿ° ÿßÿØÿßÿ±Ÿâ Ÿà ÿØÿ≥ÿ™Ÿàÿ±Ÿâ",
      "ŸÇÿßŸÜŸàŸÜ ÿßŸÑŸÖÿ±ÿßŸÅÿπÿßÿ™",
    ],
  },
  "ÿßŸÑŸÅÿ±ŸÇÿ© ÿßŸÑÿ±ÿßÿ®ÿπÿ©": {
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ£ŸàŸÑ": [
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ®ÿ≠ÿ±Ÿâ",
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ¨ŸàŸâ",
      "ÿßÿµŸàŸÑ ÿßŸÑŸÅŸÇÿ©",
      "ÿßŸÑÿ™ÿ¥ÿ±Ÿäÿπÿßÿ™ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπŸäÿ©",
      { name: "ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßÿ¨ŸÜÿ®Ÿäÿ©", subs: ["ŸÅÿ±ŸÜÿ¥", "ÿßŸÜÿ¨ŸÑÿ¥"] },
    ],
    "ÿßŸÑÿ™ÿ±ŸÖ ÿßŸÑÿ´ÿßŸÜŸä": [
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿØŸàŸÑŸâ ÿßŸÑÿÆÿßÿµ",
      "ÿßŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ¨ÿ®ÿ±Ÿâ",
      "ÿßŸÑÿ™ÿ¥ÿ±Ÿäÿπ ÿßŸÑÿ∂ÿ±Ÿäÿ®Ÿâ",
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿâ",
      "ÿßŸÑÿßÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑÿ¨ŸÜÿßÿ¶Ÿäÿ©",
      "ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸÖÿØŸÜŸâ",
    ],
  },
};

/*=====================
  ExamPopup Component
=====================*/
const ExamPopup = ({ showPopup, setShowPopup }) => {
  const [selectedYear, setSelectedYear] = useState("");
  const [selectedTerm, setSelectedTerm] = useState("");
  const [selectedSubject, setSelectedSubject] = useState(null);
  const [selectedSubOption, setSelectedSubOption] = useState(null);

  return (
    <>
      {showPopup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-primary dark:bg-darkPrimary rounded-2xl p-6 w-[90%] max-w-md shadow-lg max-h-[90vh] overflow-y-auto">
            {/* Header */}
            <div className="flex justify-between items-center text-secondary mb-4">
              <div className="flex items-center gap-2 text-xl">
                <LuGraduationCap className="text-2xl" />
                <h2>Exams</h2>
              </div>
              <IoClose
                className="text-2xl cursor-pointer"
                onClick={() => {
                  setShowPopup(false);
                  setSelectedYear("");
                  setSelectedTerm("");
                  setSelectedSubject(null);
                  setSelectedSubOption(null);
                }}
              />
            </div>

            {/* Select Year */}
            <div className="mb-4">
              <p className="font-medium mb-2 text-secondary">ÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ±ŸÇÿ©</p>
              <div className="grid grid-cols-2 gap-2">
                {YEARS.map((year) => (
                  <button
                    key={year}
                    onClick={() => {
                      setSelectedYear(year);
                      setSelectedTerm("");
                      setSelectedSubject(null);
                      setSelectedSubOption(null);
                    }}
                    className={`py-2 rounded-lg transition ${
                      selectedYear === year
                        ? "bg-secondary text-darkPrimary"
                        : "bg-gray-200 dark:bg-darkSecondary dark:text-secondary"
                    }`}
                  >
                    {year}
                  </button>
                ))}
              </div>
            </div>

            {/* Select Term */}
            {selectedYear && (
              <div className="mb-4">
                <p className="font-medium mb-2 text-secondary">ÿßÿÆÿ™ÿ± ÿßŸÑÿ™ÿ±ŸÖ</p>
                <div className="flex gap-3">
                  {TERMS.map((term) => (
                    <button
                      key={term}
                      onClick={() => {
                        setSelectedTerm(term);
                        setSelectedSubject(null);
                        setSelectedSubOption(null);
                      }}
                      className={`flex-1 py-2 rounded-lg transition ${
                        selectedTerm === term
                          ? "bg-secondary text-darkPrimary"
                          : "bg-gray-200 dark:bg-darkSecondary dark:text-secondary"
                      }`}
                    >
                      {term}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Select Subject */}
            {selectedYear && selectedTerm && (
              <div className="mt-4">
                <p className="font-medium mb-2 text-secondary">ÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿßÿØÿ©</p>
                <div className="grid grid-cols-1 gap-2">
                  {SUBJECTS[selectedYear][selectedTerm].map(
                    (subject, index) => {
                      const isObject = typeof subject === "object";
                      const isOpen =
                        isObject && selectedSubject?.name === subject.name;
                      const isSelected =
                        (!isObject && selectedSubject === subject) ||
                        (isObject && selectedSubject?.name === subject.name);

                      return (
                        <div key={index}>
                          <button
                            onClick={() => {
                              if (isObject) {
                                setSelectedSubject(subject);
                                if (isOpen) {
                                  setSelectedSubject(null);
                                  setSelectedSubOption(null);
                                }
                              } else {
                                setSelectedSubject(subject);
                                setSelectedSubOption(null);
                              }
                            }}
                            className={`w-full py-2 rounded-lg transition ${
                              isSelected
                                ? "bg-secondary text-darkPrimary"
                                : "bg-gray-200 dark:bg-darkSecondary dark:text-secondary"
                            }`}
                          >
                            {isObject ? subject.name : subject}
                          </button>

                          {/* Sub-options */}
                          {isOpen && (
                            <div className="mt-2 w-[90%] mx-auto flex gap-2">
                              {subject.subs.map((sub, i) => (
                                <button
                                  key={i}
                                  onClick={() => setSelectedSubOption(sub)}
                                  className={`w-full py-1.5 rounded-lg text-sm transition ${
                                    selectedSubOption === sub
                                      ? "bg-secondary text-darkPrimary"
                                      : "bg-gray-100 dark:bg-darkSecondary/80 dark:text-secondary"
                                  }`}
                                >
                                  {sub}
                                </button>
                              ))}
                            </div>
                          )}
                        </div>
                      );
                    }
                  )}
                </div>
              </div>
            )}

            {/* Start Exam Button */}
            {(selectedSubject || selectedSubOption) && (
              <div className="mt-6">
                <button
                  onClick={() => toast("üöÄ Coming soon...")}
                  className="w-full bg-secondary text-darkPrimary py-2.5 rounded-lg font-semibold hover:opacity-90 transition"
                >
                  ÿ®ÿØÿ° ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default ExamPopup;
